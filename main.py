import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from fastapi import FastAPI
import uvicorn
import streamlit as st
import pickle
from pathlib import Path

# 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
def generate_and_train():
    np.random.seed(42)

    # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    data = {
        'study_hours': np.clip(np.random.normal(loc=2, scale=1, size=500), 0.5, 8),  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ 8 —á–∞—Å–æ–≤
        'days_before_exam': np.random.randint(1, 31, 500),
        'previous_grades': np.clip(np.random.normal(loc=3.5, scale=0.8, size=500), 2, 5),
    }

    # –§–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Ü–µ–Ω–∫–∏
    data['grade'] = (np.clip(
        data['previous_grades'] * 0.6 +
        np.log1p(data['study_hours'] * data['days_before_exam']) * 0.4 +
        np.random.normal(0, 0.3, 500),
        2, 5  # –û—Ü–µ–Ω–∫–∏ –æ—Ç 2 –¥–æ 5
    ))

    # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 0.5 (—á—Ç–æ–±—ã –±—ã–ª–∏ –æ—Ü–µ–Ω–∫–∏ —Ç–∏–ø–∞ 3.5)
    data['grade'] = np.round(data['grade'] * 2) / 2

    df = pd.DataFrame(data)

    model = RandomForestRegressor(n_estimators=150, random_state=42)
    model.fit(df[['study_hours', 'days_before_exam', 'previous_grades']], df['grade'])

    with open('model.pkl', 'wb') as f:
        pickle.dump(model, f)

    return model


# 2. FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()
model = generate_and_train()


@app.post("/predict")
def predict(study_hours: float, days: int, previous_grade: float = 3.5):
    grade = model.predict([[study_hours, days, previous_grade]])[0]
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ 0.5
    final_grade = np.clip(round(grade * 2) / 2, 2, 5)
    return {"grade": float(final_grade)}


def run_api():
    uvicorn.run(app, host="0.0.0.0", port=8000)


# 3. Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def run_streamlit():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    try:
        with open('model.pkl', 'rb') as f:
            model = pickle.load(f)
        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except FileNotFoundError:
        st.error("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª model.pkl —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    st.title("üéì –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–æ–∫ ")

    st.markdown("""
    <style>
    .big-font { font-size:18px !important; }
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", type=["csv"])
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['study_hours', 'days_before_exam', 'previous_grades']
        if all(col in df.columns for col in required_columns):
            st.write("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç:")
            st.write(df)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
            predictions = model.predict(df[required_columns])
            df['predicted_grade'] = np.clip(np.round(predictions * 2) / 2, 2, 5)

            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
            st.write(df)

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            csv = df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV",
                data=csv,
                file_name="predicted_grades.csv",
                mime="text/csv",
            )
        else:
            st.error(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {required_columns}")

    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2 = st.columns(2)
    with col1:
        study_hours = st.slider("–ß–∞—Å–æ–≤ –≤ –¥–µ–Ω—å", 0.5, 8.0, 2.0, step=0.5,  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–æ 8 —á–∞—Å–æ–≤
                                help="–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å")
    with col2:
        days = st.number_input("–î–Ω–µ–π –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞", 1, 30, 14,
                               help="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É")

    previous_grade = st.select_slider("–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å",
                                      options=[2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0],
                                      value=3.5)

    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –æ—Ü–µ–Ω–∫—É", type="primary"):
        try:
            grade = model.predict([[study_hours, days, previous_grade]])[0]
            final_grade = np.clip(round(grade * 2) / 2, 2, 5)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.subheader(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞: {final_grade}")

            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            if final_grade >= 4.5:
                st.success("–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
                st.balloons()
            elif final_grade >= 3.5:
                st.info("–•–æ—Ä–æ—à–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ")
            else:
                st.warning("–†–∏—Å–∫ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")
                st.error("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")

            # –°–æ–≤–µ—Ç—ã
            if study_hours < 1.5 and final_grade < 4.0:
                st.markdown("üîπ **–°–æ–≤–µ—Ç:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å")
            if days < 7 and final_grade < 4.0:
                st.markdown("üîπ **–°–æ–≤–µ—Ç:** –£ –≤–∞—Å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ - —É–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1 and sys.argv[1] == "api":
        run_api()
    else:
        run_streamlit()
